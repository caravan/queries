// Code generated by "stringer -linecomment -output operator_string.go -type Relational,Binary,Unary"; DO NOT EDIT.

package operator

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EQ-0]
	_ = x[NEQ-1]
	_ = x[LT-2]
	_ = x[LTE-3]
	_ = x[GT-4]
	_ = x[GTE-5]
	_ = x[AND-6]
	_ = x[OR-7]
}

const _Relational_name = "Equal ToNot Equal ToLess ThanLess Than Or Equal ToGreater ThanGreater Than Or Equal ToAndOr"

var _Relational_index = [...]uint8{0, 8, 20, 29, 50, 62, 86, 89, 91}

func (i Relational) String() string {
	if i < 0 || i >= Relational(len(_Relational_index)-1) {
		return "Relational(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Relational_name[_Relational_index[i]:_Relational_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[ADD-0]
	_ = x[SUB-1]
	_ = x[MUL-2]
	_ = x[DIV-3]
}

const _Binary_name = "AdditionSubtractionMultiplicationDivision"

var _Binary_index = [...]uint8{0, 8, 19, 33, 41}

func (i Binary) String() string {
	if i < 0 || i >= Binary(len(_Binary_index)-1) {
		return "Binary(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Binary_name[_Binary_index[i]:_Binary_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NEG-0]
	_ = x[POS-1]
	_ = x[NOT-2]
}

const _Unary_name = "NegativePositiveBoolean Not"

var _Unary_index = [...]uint8{0, 8, 16, 27}

func (i Unary) String() string {
	if i < 0 || i >= Unary(len(_Unary_index)-1) {
		return "Unary(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Unary_name[_Unary_index[i]:_Unary_index[i+1]]
}
