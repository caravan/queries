// Code generated by "stringer -linecomment -output operator_string.go -type RelationalOperator,UnaryOperator"; DO NOT EDIT.

package ast

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EQ-0]
	_ = x[NEQ-1]
	_ = x[LT-2]
	_ = x[LTE-3]
	_ = x[GT-4]
	_ = x[GTE-5]
	_ = x[AND-6]
	_ = x[OR-7]
}

const _RelationalOperator_name = "Equal ToNot Equal ToLess ThanLess Than Or Equal ToGreater ThanGreater Than Or Equal ToAndOr"

var _RelationalOperator_index = [...]uint8{0, 8, 20, 29, 50, 62, 86, 89, 91}

func (i RelationalOperator) String() string {
	if i < 0 || i >= RelationalOperator(len(_RelationalOperator_index)-1) {
		return "RelationalOperator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _RelationalOperator_name[_RelationalOperator_index[i]:_RelationalOperator_index[i+1]]
}
func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[NEG-0]
	_ = x[POS-1]
	_ = x[NOT-2]
}

const _UnaryOperator_name = "NegativePositiveBoolean Not"

var _UnaryOperator_index = [...]uint8{0, 8, 16, 27}

func (i UnaryOperator) String() string {
	if i < 0 || i >= UnaryOperator(len(_UnaryOperator_index)-1) {
		return "UnaryOperator(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _UnaryOperator_name[_UnaryOperator_index[i]:_UnaryOperator_index[i+1]]
}
